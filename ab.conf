
lua_socket_log_errors off;

init_worker_by_lua_block {
  function aggregate(red, key)
    local count = 0
    local sum = 0
    local mean = 0
    local s = 0
    local std = 0
    local min = 0
    local max = 0
    local cursor = "0"
    local result = nil
    local data = nil

    -- S(n) = S(n-1) + (x(n) - E(n-1))(x(n) - E(n-))

    repeat
      result = red:zscan(key, cursor, "count", 100)
      cursor, data = unpack(result)

      for i=1, #data, 2 do
        local score = tonumber(data[i + 1])

        count = count + 1
        sum = sum + score
        s = s + 1.0 * (count - 1) / count * (score - mean) * (score - mean)
        mean = mean + 1.0 * (score - mean) / count

        if i == 1 then
          min = score
          max = score
        else
          min = math.min(min, score)
          max = math.max(max, score)
        end
      end
    until cursor == "0"

    std = math.sqrt(s / (count - 1))

    return {
      tostring(count), tostring(sum),
      tostring(min), tostring(max),
      tostring(mean), tostring(std)
    }
  end
  function calc(penv)
    local red = redis:new()
    -- red:set_timeouts(100, 200, 200)
    red:set_timeout(1000)
    local ok, err = red:connect('127.0.0.1', 6379)
    if not ok then
      ngx.log(ngx.ERR, 'can not connect redis', err)
    end
    red:select(penv == 'production' and 1 or 0) -- 测试环境实验db0,正式环境实验db1
    local versions = red:sort("versions", "by", "*", "get", "#", "get", "version:*->var_name")
    local targets = red:sort("targets", "by", "*", "get", "#", "get", "target:*->var_name")
    for i, version in ipairs(versions) do
      if i % 2 == 1 then
        local version_var_name = versions[i + 1]
        if version_var_name then -- 少数数据有问题，拿不到var_name
          ngx.log(ngx.ERR, penv .. ", version_var_name: " .. version_var_name)
          local status = red:hget("var:" .. version_var_name, "status")
          if status == "running" then -- 只有运行中的实验才计算
            local target_count = 0
            for j, target in ipairs(targets) do
              if j % 2 == 1 then
                local target_var_name = targets[j + 1]
                if target_var_name == version_var_name then -- 只有版本和指标属于同一个实验才计算转化率
                  local taggr = aggregate(red, "track:" .. version .. ":" .. target)
                  if taggr then
                    local tuv, tpv, tmin, tmax, tmean, tstd = unpack(taggr)
                    red:hmset(
                      "version:" .. version,
                      target .. ":count", tpv,
                      target .. ":user", tuv,
                      target .. ":min", tmin,
                      target .. ":max", tmax,
                      target .. ":mean", tmean,
                      target .. ":std", tstd
                    )
                    target_count = target_count + 1
                    ngx.log(ngx.ERR, penv .. ", set target to version: " .. "version:" .. version .. " : " .. cjson.encode({taggr}))
                  end
                end
              end
            end
            if target_count > 0 then -- 指标数量大于0的时候再处理PV和UV
              local aggr = aggregate(red, "uv:" .. version)
              if aggr then
                local uv, pv, min, max, mean, std = unpack(aggr)
                red:hmset(
                  "version:" .. version, "pv", pv, "uv", uv,
                  "uv:min", min, "uv:max", max, "uv:mean", mean, "uv:std", std
                )
                ngx.log(ngx.ERR, penv .. ", set pv to version: " .. "version:" .. version .. " : " .. cjson.encode({aggr}))
              end
            end
          end
        end
      end
    end
  end
  local delay = 60
  local calc_timer_callback = function(premature)
    if not premature then
      ngx.log(ngx.ERR, 'run calc_timer_callback')
      calc('dev')
      calc('production')
      ngx.log(ngx.ERR, 'run calc end')
    end
  end
  if 0 == ngx.worker.id() then
    local ok, err = ngx.timer.every(delay, calc_timer_callback)
    if not ok then
      ngx.log(ngx.ERR, 'failed to create timer: ', err)
    end
  end
}

init_by_lua_block {
  local ffi = require "ffi"
  ffi.cdef[[
    typedef unsigned char u_char;
    uint32_t ngx_murmur_hash2(u_char *data, size_t len);
  ]]
  murmurhash2 = function(value)
    return tonumber(ffi.C.ngx_murmur_hash2(ffi.cast('uint8_t *', value), #value))
  end
  cjson = require "cjson"
  cjson.encode_empty_table_as_object(false)
  redis = require "resty.redis"
  set_headers = function()
    ngx.header['Content-Type'] = 'application/json; charset=utf8'
    local origin = ngx.req.get_headers()['Origin']
    if origin then
      ngx.header['Access-Control-Allow-Origin'] = origin
      ngx.header['Access-Control-Allow-Credentials'] = 'true'
      ngx.header['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS, PUT, DELETE'
      ngx.header['Access-Control-Allow-Headers'] = 'X-Session-Id, X-Version, X-Env, X-User-Id'
    end
  end
  response = function(status, code, message, data)
    data = data or {}
    data["code"] = code
    data["msg"] = message
    -- ngx.log(ngx.ERR, "write data: ", ngx.headers_sent, status, cjson.encode(data))
    local value = ngx.headers_sent
    if value then
      ngx.log(ngx.ERR, "headers_sent, skip write data: ", status, cjson.encode(data))
      return
    end
    ngx.status = status
    set_headers()
    ngx.print(cjson.encode(data))
    ngx.eof()
  end
  connect_redis = function(penv)
    local red = redis:new()
    -- red:set_timeouts(100, 200, 200)
    red:set_timeout(1000)
    local ok, err = red:connect('127.0.0.1', 6379)
    if not ok then
      response(500, 1, 'can not connect redis')
    end
    red:select((penv or env()) == 'production' and 1 or 0) -- 测试环境实验db0,正式环境实验db1
    return red
  end

  local scripts = {
    ['add-layer'] = [[
      local exists = redis.call("sismember", "layers", ARGV[1])
      if exists == 1 then
          return {-1, "layer exists"}
      end
      return {redis.call("sadd", "layers", ARGV[1]), "add layer success"}
    ]]
  }
  local script_sha = {}
  evalscript = function(script_name, ...)
    if not script_sha[script_name] then
      local red = connect_redis()
      local res, err = red:script("load", scripts[script_name])
      if err then
        response(500, -1, 'err to load script' .. err)
      end
      script_sha[script_name] = res
      ngx.log(ngx.ERR, "load script", script_name, res)
    end
    local sha = script_sha[script_name]
    return evalsha(sha, ...)
  end
  evalsha = function(...)
    local red = connect_redis()
    local res, err = red:evalsha(...)
    if err then
      response(500, -1, err)
    else
      local code, msg = unpack(res)
      if code == 1 then
        response(200, 0, msg)
      else
        response(500, code, msg)
      end
    end
    close_redis(red)
  end
  close_redis = function(red)
    local ok, err = red:set_keepalive(10000, 100)
    if not ok then
      response(500, 1, 'failed to set keepalive: ' .. err)
    end
  end
  arg = function(name, default)
    local var = ngx.var['arg_' .. name]
    if not var or var == '' then
      local header = ngx.req.get_headers()[name]
      if not header or header == '' then
        if default then
          return default
        end
        response(400, 1, name .. ' is required')
      end
      return header
    end
    return ngx.unescape_uri(var)
  end
  env = function()
    return ngx.req.get_headers()['X-Env']
  end
  get_user_id = function()
    local user_id = ngx.req.get_headers()['X-User-Id']
    if user_id and user_id ~= '' then
      return user_id
    end
    local sid = ngx.req.get_headers()['X-Session-Id']
    if not sid or sid == '' then
      return response(400, -1, 'session_id is required')
    end
    local session_server = env() == 'production' and '10.0.0.32' or '10.0.0.17'
    local red = redis:new()
    red:set_timeouts(100, 200, 200)
    local ok, err = red:connect(session_server, 6379)
    if not ok then
      return response(500, 1, 'can not connect redis')
    end
    red:select(1)
    local res, err = red:get("carol:sid:" .. sid)
    if not res then
      ngx.log(ngx.ERR, "failed to get carol_user_id: ", err)
      return response(403, -1, 'can not get user_id')
    end
    if type(res) == "string" then
      local carol_user_id = cjson.decode(res)['user_id']
      if carol_user_id then
        return carol_user_id
      end
    end
    return response(400, -1, 'can not get user_id')
  end
}

server {
  listen       80 default_server;
  location = /ab/layers {
    content_by_lua_block {
      local red = connect_redis()
      local res, err = red:smembers("layers")
      if err then
        close_redis(red)
        return response(500, 1, 'get layers failed')
      end
      close_redis(red)
      response(200, 0, "success", {layers=res})
    }
  }
  location = /ab/layer/add {
    content_by_lua_block {
      local layer_name = arg('layer')
      evalscript('add-layer', 0, layer_name)
      -- redis-cli script load "$(cat lua/add-layer.lua)"
      -- local sha = '8d15964e64deda53894b22ad4fd7abf8885911d0'
      -- evalsha(sha, 0, layer_name)
    }
  }
  location = /ab/layer/weight {
    content_by_lua_block {
      local layer_name = arg('layer')
      local var_name = arg('var')
      local weight = tonumber(arg('weight'))
      -- TODO sum(weight) = 100
      if weight < 0 or  weight > 100 then
        return response(400, 1, 'weight is not validate')
      end
      -- redis-cli script load "$(cat lua/layer-weight.lua)"
      local sha = "be118064ee651623d3c7af26f5ab2ef207e46a0b"
      evalsha(sha, 0, layer_name, var_name, weight)
    }
  }
  location = /ab/tests {
    content_by_lua_block {
      local red = connect_redis()
      -- sort vars by nosort get # get *->name get *->layer get *->type get *->status get *->default
      local res, err = red:sort(
        "vars", 'by', 'var:*->modified',
        'get', '#', 'get', 'var:*->name',
        'get', 'var:*->layer', 'get', 'var:*->type', 'get', 'var:*->status',
        'get', 'var:*->default', 'get', 'var:*->created', 'get', 'var:*->modified',
        'get', 'var:*->weight',
        'DESC'
      )
      if err then
        close_redis(red)
        return response(500, 1, 'get test failed')
      end
      close_redis(red)
      response(200, 0, "success", {tests=res})
    }
  }
  location = /ab/test/action {
    content_by_lua_block {
      local var_name = arg('var')
      local action = arg('action')
      if action == 'running' or action == 'stoped' or action == 'deleted' then
        local red = connect_redis()
        local res, err = red:sismember("vars", var_name)
        if err or res == 0 then
          close_redis(red)
          return response(404, 1, 'var_name: ' .. var_name .. ' not exists, edit var failed.')
        end
        if action == "deleted" then
          -- redis-cli script load "$(cat lua/remove-test.lua)"
          local sha = "35c6f34e36d7e3d36b999e61ea3b6e60f6a0ba27"
          return evalsha(sha, 0, var_name)
        else
          local res, err = red:hmset('var:' .. var_name, 'status', action, 'modified', ngx.time())
          if err then
            close_redis(red)
            return response(500, 1, 'set var failed, var_name: ' .. var_name)
          end
        end
        close_redis(red)
      end
      response(200, 0, 'edit test success')
    }
  }
  location = /ab/test/add {
    content_by_lua_block {
      local layer_name = arg('layer')
      local layer_weight = tonumber(arg('layer_weight'))
      if layer_weight < 0 or  layer_weight > 100 then
        return response(400, 1, 'layer_weight is not validate')
      end
      local var_name = arg('var')
      local test_name = arg('test_name')
      local type = arg('type')
      local default = arg('default')

      -- redis-cli script load "$(cat lua/add-test.lua)"
      local sha = "5e688dd45c2986f5a35ca7cef848064903b84d6b"
      evalsha(sha, 0, layer_name, layer_weight, var_name, test_name, type, default)
    }
  }
  location = /ab/test/weight {
    content_by_lua_block {
      local var_name = arg('var')
      local value = arg('val')
      local name = arg('name', value)
      local weight = tonumber(arg('weight'))
      if weight < 0 or  weight > 100 then
        return response(400, 1, 'weight is not validate')
      end

      -- redis-cli script load "$(cat lua/test-weight.lua)"
      local sha = "6b49dfc816f34d1196d2a66c0cf1c08a5265acc4"
      evalsha(sha, 0, var_name, value, weight, name)
    }
  }
  location = /ab/test/traffic {
    content_by_lua_block {
      local var_name = arg('var')
      local red = connect_redis()
      -- redis-cli script load "$(cat lua/traffic.lua)"
      local sha = "a292ba1142a3e49bd9584e1c7835768c6758208b"
      local res, err = red:evalsha(sha, 0, var_name)
      local values, targets, traffic, args = unpack(res)
      close_redis(red)
      response(200, 0, "success", {
        values=values,
        targets=targets,
        traffic=traffic,
        args=args,
      })
    }
  }
  location = /ab/test/rate {
    content_by_lua_block {
      local var_name = arg('var')
      local red = connect_redis()
      -- redis-cli script load "$(cat lua/rate.lua)"
      local sha = "01100378f5a92b7ee8ebb005ff2df30a23c79f89"
      local res, err = red:evalsha(sha, 0, var_name)
      local versions, targets, args = unpack(res)
      close_redis(red)
      response(200, 0, "success", {
        versions=versions,
        targets=targets,
      })
    }
  }
  location = /ab/versions {
    content_by_lua_block {
      local red = connect_redis()
      local res, err = red:sort(
        'versions', 'by', 'nosort',
        'get', '#', 'get', 'version:*->var_name', 'get', 'version:*->name',
        'get', 'version:*->value', 'get', 'version:*->weight',
        'get', 'version:*->pv', 'get', 'version:*->uv',
        'get', 'version:*->created', 'get', 'version:*->modified'
      )
      if err then
        close_redis(red)
        return response(500, 1, 'get target failed')
      end
      close_redis(red)
      response(200, 0, "success", {
        versions=res,
      })
    }
  }
  location = /ab/targets {
    content_by_lua_block {
      local red = connect_redis()
      local res, err = red:sort(
        'targets', 'by', 'nosort',
        'get', '#', 'get', 'target:*->var_name',
        'get', 'target:*->count', 'get', 'target:*->rate'
      )
      if err then
        close_redis(red)
        return response(500, 1, 'get target failed')
      end
      close_redis(red)
      response(200, 0, "success", {
        targets=res,
      })
    }
  }
  location = /ab/target/add {
    content_by_lua_block {
      local var_name = arg('var')
      local target_name = arg('target')
      -- redis-cli script load "$(cat lua/add-target.lua)"
      local sha = "11289d139338e4713bb411da5e62158978a80b77"
      evalsha(sha, 0, var_name, target_name)
    }
  }
  location = /ab/var {
    auth_basic off;
    content_by_lua_block {
      if ngx.req.get_method() == "OPTIONS" then
        set_headers()
        ngx.exit(ngx.HTTP_OK)
      end
      local user_id = get_user_id()
      local var_name = arg('name')
      local red = connect_redis()
      -- redis-cli script load "$(cat lua/get-var.lua)"
      local sha = "5f771c4ff7ad2bf447f702d8bf8e536fbd1a3af2"
      local hash = murmurhash2(var_name .. ":" .. user_id)
      local res, err = red:evalsha(sha, 0, var_name, user_id, ngx.today(), hash)
      if err then
        response(200, -1, err)
      else
        local code, data = unpack(res)
        if code == 1 then
          local type, test, layer, value = unpack(data)
          response(200, 0, "success", {
            type=type, test=test, layer=layer, value=value,
            hash=hash,
          })
        else
          response(200, code, data)
        end
      end
      close_redis(red)
    }
  }
  location = /ab/track {
    auth_basic off;
    content_by_lua_block {
      ngx.req.read_body()
      local user_id = get_user_id()
      local data = ngx.req.get_body_data()
      if data then
        local params = cjson.decode(data)
        -- redis-cli script load "$(cat lua/track.lua)"
        local sha = "007a924fa67ec732ba1cd1f560e6da67184a0082"
        local args = {user_id, ngx.today()}
        for target, inc in pairs(params) do
          table.insert(args, target)
          table.insert(args, inc)
        end
        local red = connect_redis()
        local res, err = red:evalsha(sha, 2, unpack(args))
        close_redis(red)
        response(200, 0, "success")
      end
    }
  }
  location / {
    root /var/www/html;
    try_files $uri $uri/ /index.html;
  }
  auth_basic           "AB test";
  auth_basic_user_file /etc/nginx/htpasswd; 
}
