

server {
  listen       80 default_server;
  location = /ab/var {
    content_by_lua_block {
      local cjson = require "cjson"
      local redis = require "resty.redis"
      local red = redis:new()
      red:set_timeouts(100, 200, 200)
      local ok, err = red:connect('redis', 6379) -- docker-compose里面定义了link
      if not ok then
        ngx.log(ngx.ERR, "failed to connect: ", err)
      end
      -- local res, err = red:hmset("animals", { dog = "bark", cat = "meow", cow = "moo" })
      -- if not res then
      --   ngx.log(ngx.ERR, "failed to set track data: ")
      -- end
      local ok, err = red:set_keepalive(10000, 100)
      if not ok then
          ngx.log(ngx.ERR, "failed to set keepalive: ", err)
          ngx.exit(500)
      end
      return ngx.print(cjson.encode({
        code = 0,
        msg = "success"
      }))
    }
  }
  location = /ab/track {
    content_by_lua_block {
      local cjson = require "cjson"
      local redis = require "resty.redis"
      local red = redis:new()
      red:set_timeouts(100, 200, 200)
      local ok, err = red:connect('redis', 6379) -- docker-compose里面定义了link
      if not ok then
        ngx.log(ngx.ERR, "failed to connect: ", err)
      end
      -- local res, err = red:hmset("animals", { dog = "bark", cat = "meow", cow = "moo" })
      -- if not res then
      --   ngx.log(ngx.ERR, "failed to set track data: ")
      -- end
      local ok, err = red:set_keepalive(10000, 100)
      if not ok then
          ngx.log(ngx.ERR, "failed to set keepalive: ", err)
          ngx.exit(500)
      end
      return ngx.print(cjson.encode({
        code = 0,
        msg = "success"
      }))
    }
  }
}
