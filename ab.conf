
resolver 127.0.0.11 ipv6=off;

init_by_lua_block {
  cjson = require "cjson"
  redis = require "resty.redis"
  response = function(status, code, message)
    ngx.print(cjson.encode({ code=code, msg=message }))
    ngx.exit(status)
  end
  response_value = function(val, test)
    if test.type == "number" then
      val = tonumber(val)
    end
    ngx.print(cjson.encode({
      code=0, msg='success',
      type=test.type, test=test.name, layer=test.layer, value=val,
    }))
    ngx.exit(200)
  end
  connect_redis = function()
    local red = redis:new()
    red:set_timeouts(100, 200, 200)
    local ok, err = red:connect('redis', 6379) -- docker-compose里面定义了link
    if not ok then
      response(400, 1, 'arg_name is required')
    end
    -- ngx.log(ngx.ERR, 'success to connect redis')
    return red
  end
  close_redis = function(red)
    local ok, err = red:set_keepalive(10000, 100)
    if not ok then
      response(500, 1, 'failed to set keepalive: ' .. err)
    end
  end
  arg = function(name)
    local var = ngx.var['arg_' .. name]
    if not var or var == '' then
      response(400, 1, name .. ' is required')
    end
    return var
  end
}

server {
  listen       80 default_server;
  location = /ab/layer/add {
    content_by_lua_block {
      local layer_name = arg('layer')
      local red = connect_redis()
      local res, err = red:sadd("layers", layer_name)
      if err then
        close_redis(red)
        return response(500, 1, 'add layer failed')
      end
      close_redis(red)
      response(200, 0, 'add layer success')
    }
  }
  location = /ab/layer/edit {
    content_by_lua_block {
      local layer_name = arg('layer')
      local var_name = arg('var')
      local weight = tonumber(arg('weight'))
      -- TODO sum(weight) = 100
      if weight < 0 or  weight > 100 then
        return response(400, 1, 'weight is not validate')
      end
      local red = connect_redis()
      local res, err = red:sismember("layers", layer_name)
      if err or res == 0 then
        close_redis(red)
        return response(404, 1, 'layer: ' .. layer_name .. ' not exists')
      end
      local res, err = red:sismember("vars", var_name)
      if err or res == 0 then
        close_redis(red)
        return response(404, 1, 'var_name: ' .. var_name .. ' not exists')
      end
      local res, err = red:zadd(layer_name, weight, var_name)
      if err then
        close_redis(red)
        return response(500, 1, 'edit layer: ' .. layer_name .. ' failed. var_name: ' .. var_name)
      end
      close_redis(red)
      response(200, 0, 'edit layer success')
    }
  }
  location = /ab/test/add {
    content_by_lua_block {
      local layer_name = arg('layer')
      local layer_weight = tonumber(arg('layer_weight'))
      if layer_weight < 0 or  layer_weight > 100 then
        return response(400, 1, 'layer_weight is not validate')
      end
      local var_name = arg('var')
      local test_name = arg('test_name')
      local type = arg('type')
      local default = arg('default')

      local red = connect_redis()
      local res, err = red:sismember("vars", var_name)
      if err or res > 0 then
        close_redis(red)
        return response(404, 1, 'var_name: ' .. var_name .. ' exists, add var failed.')
      end
      local res, err = red:sadd('vars', var_name)
      if err then
        close_redis(red)
        return response(500, 1, 'add var: ' .. var_name .. ' to vars failed.')
      end
      local res, err = red:hmset(var_name, 'layer', layer_name, 'name', test_name, 'type', type, 'status', 'init', 'default', default)
      if err then
        close_redis(red)
        return response(500, 1, 'save var: ' .. var_name .. ' failed.')
      end

      local res, err = red:zadd(layer_name, layer_weight, var_name)
      if err then
        close_redis(red)
        return response(500, 1, 'edit layer: ' .. layer_name .. ' failed. var_name: ' .. var_name)
      end
      local res, err = red:zadd(var_name .. '_vals', 100, default)
      if err then
        close_redis(red)
        return response(500, 1, 'edit var: ' .. var_name .. ' failed. val_name: ' .. default)
      end

      close_redis(red)
      response(200, 0, 'edit layer success')
    }
  }
  location = /ab/test/edit {
    content_by_lua_block {
      local var_name = arg('var')
      local val_name = arg('val')
      local weight = tonumber(arg('weight'))
      if weight < 0 or  weight > 100 then
        return response(400, 1, 'weight is not validate')
      end

      local red = connect_redis()
      local res, err = red:sismember("vars", var_name)
      if err or res == 0 then
        close_redis(red)
        return response(404, 1, 'var_name: ' .. var_name .. ' not exists, edit var failed.')
      end
      local res, err = red:zadd(var_name .. '_vals', weight, val_name)
      if err then
        close_redis(red)
        return response(500, 1, 'edit var: ' .. var_name .. ' failed. val_name: ' .. val_name)
      end
      local res, err = red:del(var_name .. '_user_val')
      if err then
        close_redis(red)
        return response(500, 1, 'remove user_val for var: ' .. var_name .. ' failed.')
      end

      close_redis(red)
      response(200, 0, 'edit test success')
    }
  }
  location = /ab/target/add {
    content_by_lua_block {
      local var_name = arg('var')
      local target_name = arg('target')

      local red = connect_redis()
      local res, err = red:sismember("vars", var_name)
      if err or res == 0 then
        close_redis(red)
        return response(404, 1, 'var_name: ' .. var_name .. ' not exists, add target failed.')
      end
      local res, err = red:sismember("targets", target_name)
      if err or res > 0 then
        close_redis(red)
        return response(500, 1, 'target_name: ' .. target_name .. ' exists, add target failed.')
      end
      local res, err = red:sadd("targets", target_name)
      if err then
        close_redis(red)
        return response(500, 1, 'add target: ' .. target_name .. ' failed.')
      end
      local res, err = red:set(target_name, var_name)
      if err then
        close_redis(red)
        return response(500, 1, 'save target: ' .. target_name .. ' with var_name: ' .. var_name .. ' failed.')
      end

      close_redis(red)
      response(200, 0, 'add target success')
    }
  }
  location = /ab/var {
    content_by_lua_block {
      local user_id = arg('user_id')
      local var_name = arg('name')
      local red = connect_redis()
      local res, err = red:sismember("vars", var_name)
      if err or res == 0 then
        close_redis(red)
        return response(404, 1, 'var_name: ' .. var_name .. ' not exists, get val failed.')
      end

      local res, err = red:hgetall(var_name)
      if err or res == ngx.null then
        close_redis(red)
        return response(404, 1, 'can not find test by var_name: ' .. var_name)
      end
      local test = red:array_to_hash(res)
      ngx.log(ngx.ERR, "get var by name: ", var_name, test.status)
      if test.status ~= 'running' then
        close_redis(red)
        return response_value(test.default, test)
      end
      local val, err = red:hget(var_name .. '_user_val', user_id)
      -- ngx.log(ngx.ERR, "get val by var_name: ", var_name, val)
      if err or val == ngx.null then
        -- TODO
        val = 'val100'
      end

      close_redis(red)
      response_value(val, test)
    }
  }
  location = /ab/track {
    content_by_lua_block {
      ngx.req.read_body()
      local user_id = arg('user_id')
      local data = ngx.req.get_body_data()
      local red = connect_redis()
      if data then
        local params = cjson.decode(data)
        ngx.log(ngx.ERR, "body: ", data)
        for target, inc in pairs(params) do
          ngx.log(ngx.ERR, "target: ", target, " --> ", inc)
         
          local red = connect_redis()
          local res, err = red:sismember("targets", target)
          if err or res == 0 then
            close_redis(red)
            return response(404, 1, 'target: ' .. target .. ' not exists')
          end
          local var_name, err = red:get(target)
          if err or var_name == ngx.null then
            close_redis(red)
            return response(404, 1, 'can not find var_name, target: ' .. target)
          end
          local val_name, err = red:hget(var_name .. '_user_val', user_id)
          if err or val_name == ngx.null then
            close_redis(red)
            return response(404, 1, 'can not find val_name, var_name: ' .. var_name)
          end
          -- ngx.log(ngx.ERR, "var_name: ", var_name, "val_name: ", val_name, "target: ", target)
          local key = var_name .. '_' .. val_name .. '_' .. target
          local res, err = red:zincrby(key, inc, user_id)
          if err then
            close_redis(red)
            return response(404, 1, 'incrby ' .. user_id .. ' failed. key: ' .. key)
          end
        end
      end

      close_redis(red)
      response(200, 0, 'save track success')
    }
  }
}
